import 'dart:io';
import 'dart:isolate';

import "Isolate_Wrapper__class.dart";


void Func_Start_to_Isolate(List<SendPort> vec__SendPort)
{
  //Данная функция будет вызвана единожды в созданным Изоляте, при вызве в нее передатся список из 3 Пользовательских и 2ух служеюных "SendPort`ов":
  //vec__SendPort[enum_PortID.Message.index]          - здесь SendPort - для пересылки любого сообщения в поток, который создал этот Изолят.
  //vec__SendPort[enum_PortID.Kill.index]             - здесь SendPort - для пересылки сообщения "Kill" или на самом деле любого соодения, если нужно Закрыть данынй Изолят.
  //vec__SendPort[enum_PortID.SendPort_to_Main.index] - здесь SendPort - для пересылки SendPort`а этого Изолята, в случае, если нужно, чтобы из Потока, который создал этот Изолят можно было присылать сообщенеи в этом Изолят.


  //-------------------------Если нужно, то Создаем порт для передачи сообщений в Главный поток, который создал этот Изолят:Начало-------------------------
  ReceivePort isolate_ReceivePort = ReceivePort();

  vec__SendPort[enum_PortID.SendPort_to_Main.index].send(isolate_ReceivePort.sendPort);          // Отправляем главному потоку порт для ответных сообщений


  isolate_ReceivePort.listen((dynamic message_from_Main_Isolate)     //Слушаем входящие сообщения от Главного потока.
  {
    if (message_from_Main_Isolate is String == true)
    {
      print(message_from_Main_Isolate); //Выводим сообщение, если передана строка.
    }
  });
  //-------------------------Создадим порт для передачи сообщений в Главный поток, который создал этот Изолят:Конец-------------------------



  //----------------------------------------------Отправляем любые данные из Изолята в Главный поток:Начало------------------------------------------------
  vec__SendPort[enum_PortID.Message.index].send("Message_from_Isolate");
  //----------------------------------------------Отправляем любые данные из Изолята в Главный поток:Конец------------------------------------------------


  //----------------------------------------------Пользовтаельский Код данный функции:Начало------------------------------------------------
  print("Hello from Isolate_1");
  //----------------------------------------------Пользовтаельский Код данный функции:Конец------------------------------------------------



  //--------------------Если нужно удалить данный Изолят, из самого Изолята, то есть из этой функции, то нужно отправить сообщение Kill":Начало-------------
  vec__SendPort[enum_PortID.Kill.index].send("Kill");
  //--------------------Если нужно удалить данный Изолят, из самого Изолята, то есть из этой функции, то нужно отправить сообщение Kill":Конец-------------


  print("Hello from Isolate_2");

}


void Func_RecieveData_from_Isolate(dynamic Data_from_Isolate, Isolate_Wrapper__class Isolate_Wrapper__ref, List<Object>? User_Vec__Any_Object)
{
  //-----------------------------------------------------------------------------
  //Данная функция будет вызыватся каждый раз, как из функции "Func_Start_to_Isolate" будут передаватся данные из Изолята в поток через вызов "SendPort_from_Recieve.send()", который этот Изолят создал, и этот поток вызовет эту функцию.

  //Data_from_Isolate - это данные переданные из функции "Func_Start_to_Isolate" через "SendPort_from_Recieve.send()".
  //Это могут бы ЛЮБЫЕ ДАННЫЕ - от оыбчого числа, строки, до какого нибудь контенейра List и прочее. НО НУЖНО ПОМНИТЬ, ЧТО ИЗ ИЗОЛЯТА НЕЛЬЗЯ ПЕРЕДАТЬ ССЫЛКУ НА КАКОЙ ЛИБО РЕСУРС КОТОРЫЙ ДОСТУПЕН В ИЗОЛЯТЕ - ТО ЕСТЬ К ПРИМЕРУ НЕЛЬЗЯ ПЕРЕДАТЬ ССЫЛКУ НА List<int> - это будет копия List<int>, а не ссылка.
  //Так как именно Пользователь, то есть "я" передаю из функуции Изолята "Func_Start_to_Isolate" данные, то соовтетвенно я знаю, что и какого типа я передаю и в этой функции нужно обращатся с "Data_from_Isolate" соовтетвенно переданного типа.

  //Isolate_Wrapper__ref - это ссылка на обьект класса "Isolate_Wrapper__class" у которого был вызван метод "Run_Isolate".
  //User_Vec__Any_Object - вектор любых Пользовательких данных, которые передал Пользотвалье пр ивызве метода "Run_Isolate". Может быть "null" - если Пользователь передаль "null".
  //-----------------------------------------------------------------------------


  //---------------------Выводим Пользовательские данные переданные в функцию "Run_Isolate":Начало----------------------------------
if(User_Vec__Any_Object != null)
  {
    for(int i=0; i<User_Vec__Any_Object.length; i++)
    {
       //Обращаемся к переданным элементам в соответвии с их типом и делаем с ними всякое.
    }
  }
//---------------------Выводим Пользовательские данные переданные в функцию "Run_Isolate":Конец----------------------------------




  //-----------------------------------Выводим данные переданные из Изолята:Начало----------------------------------------
  if(Data_from_Isolate is String == true)
    {
      print(Data_from_Isolate);
    }
  //-----------------------------------Выводим данные переданные из Изолята:Конец----------------------------------------



//---------------------------Отравляем данные в Изолят, при условии, что в Изоляте мы передали SenPort в Главный поток:Начало----------------------------
    Isolate_Wrapper__ref.Send_Message_to_Isolate("Message to Isolate from Main thread");
//---------------------------Отравляем данные в Изолят, при условии, что в Изоляте мы передали SenPort в Главный поток:Конец----------------------------



}

void Callback_Error_func(String string_error, Isolate_Wrapper__class Isolate_Wrapper__class_ref)
{
  //Колбек, который будет вызыватся при появлении ошибки в Изоляте.
  //string_error               - текст ошибки.
  //Isolate_Wrapper__class_ref - Ссылка на обьект класса.

  print("Error:" + string_error);

  Isolate_Wrapper__class_ref.Isolate_kill();
}


void main() async
{

  //Небольшой класс обертка над Изолятом.

List<int>List_str = [1,555];
  Object Object_ = List_str;

  print(555);

  //-------------------------------------Создаем обьект класса:Начало-------------------------------------------
  //Callback_Error_func       - кобек функция, которая вызовется, если в Изоляте произдет ошибка.

  Isolate_Wrapper__class Isolate_Wrapper_ = new Isolate_Wrapper__class(Callback_Error_func);        //Создаем обеькт класса.
  //-------------------------------------Создаем обьект класса:Конец-------------------------------------------


  //Доступные методы:
  //-Run_Isolate                             - запускает функцию в Новом Изоляте.
  //-Send_Message_to_Isolate                 - Отправляет данные из текущего Изолята, в котором вызван "Run_Isolate" в созданный Изолят.
  //-Isolate_kill                            - Полностью закрывает Изолят.
  //-get__Isolate_status                     - Возвращает статус Изолята: Активен или Закрыт.



  //----------------------------------------------Run_Isolate:Начало---------------------------------------------

  List<Object>vec__any_data = ["string", 555];         //Список любых данных, которые можно отправить в функцию "Func_RecieveData_from_Isolate", которая будет вызыватся каждый раз, как из Изолята будет послано сообщение в Изолят данного класса, который его создал.

  //Func_Start_to_Isolate         - функция, которая будет запущена в Изоляте.
  //Func_RecieveData_from_Isolate - функция, которая будет вызыватся каждый раз, как из Изолята будет послано сообщение в Изолят данного класса, который его создал.

  Isolate_Wrapper_.Run_Isolate(Func_Start_to_Isolate, Func_RecieveData_from_Isolate, vec__any_data);

  //----------------------------------------------Run_Isolate:Конец----------------------------------------------


  //----------------------------------------------Send_Message_to_Isolate:Начало---------------------------------------------

  Isolate_Wrapper_.Send_Message_to_Isolate("Message to Isolate from Main");   //Отравляет сообщение в запущенный Изолят - при условии, если в функции "Func_Start_to_Isolate" была вызвана отправка SendPort`а в Главный Изолят создавший Изолят, до тех пор, внутри класса сообщения на отправку будут помещатся в вектор ожидания и будут отправлены в тот момент, когда будет прислан SendPort из Изолята.

  //----------------------------------------------Send_Message_to_Isolate:Конец----------------------------------------------


  //----------------------------------------------Isolate_kill:Начало---------------------------------------------

   //Isolate_Wrapper_.Isolate_kill();   //Закрывает Изолят и освобождает все свящанные с ним ресурсы. После этого, можно опять создавать новый Изолят.

  //----------------------------------------------Isolate_kill:Конец----------------------------------------------




  print("End1");

  sleep(const Duration(seconds: 5));

  print("End2");

}
